/* eslint-disable */
/* Generated by @graphql-codegen/cli@undefined */
import gql from 'graphql-tag';
import * as Urql from '@urql/vue';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  AWSJSON: { input: string; output: string; }
};

export type B2PartUploadEndpoint = {
  readonly __typename?: 'B2PartUploadEndpoint';
  readonly b2_upload_endpoints: ReadonlyArray<B2UploadEndpoint>;
  readonly fuid: Scalars['String']['output'];
};

export type B2UploadEndpoint = {
  readonly __typename?: 'B2UploadEndpoint';
  readonly b2_authtoken: Scalars['String']['output'];
  readonly b2_uploadurl: Scalars['String']['output'];
};

export type BackendStatus = {
  readonly __typename?: 'BackendStatus';
  readonly status: Scalars['String']['output'];
  readonly version?: Maybe<Scalars['String']['output']>;
};

export type DownloadLink = {
  readonly __typename?: 'DownloadLink';
  readonly blob: Scalars['String']['output'];
  readonly blob_size: Scalars['Int']['output'];
  readonly token?: Maybe<Scalars['String']['output']>;
  readonly url: Scalars['String']['output'];
};

export type DownloadResponse = {
  readonly __typename?: 'DownloadResponse';
  readonly urls?: Maybe<ReadonlyArray<Maybe<DownloadLink>>>;
};

export type DropboxStatus = {
  readonly __typename?: 'DropboxStatus';
  readonly linked: Scalars['Boolean']['output'];
  readonly message?: Maybe<Scalars['String']['output']>;
};

export type FileUploadComplete = {
  readonly fuid: Scalars['String']['input'];
  readonly shasum?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  readonly sid: Scalars['String']['input'];
};

/**   Server returned type to indicate where to upload a certain file */
export type FileUploadPathB2 = {
  readonly __typename?: 'FileUploadPathB2';
  /**   bucket-relative location (value passed to X-Bz-File-Name header) */
  readonly b2_path: Scalars['String']['output'];
  /**   User-provided unique ID (fuid) from corresponding FileUploadRequest */
  readonly fuid: Scalars['String']['output'];
};

export type FileUploadPathDropbox = {
  readonly __typename?: 'FileUploadPathDropbox';
  readonly fuid: Scalars['String']['output'];
  readonly path: Scalars['String']['output'];
};

/**   A single local file which we intend to upload */
export type FileUploadRequest = {
  /**
   *   A user (auto-)generated unique identifier to refer to this specific file.
   *  This id will be used by the backend to communicate information about this file during the upload session
   *  and afterwards for specific analysis results
   */
  readonly fuid: Scalars['String']['input'];
  /**   If available, the MIME type for the file. Ex: image/jpg */
  readonly mime_type?: InputMaybe<Scalars['String']['input']>;
  /**   Epoch timestamp when last modified */
  readonly origin_last_modified?: InputMaybe<Scalars['Int']['input']>;
  /**   The full qualified path name, Ex: C:\some_folder\some_file.jpg */
  readonly origin_path: Scalars['String']['input'];
  /**   Byte size of the file */
  readonly size: Scalars['Int']['input'];
};

/**   Response type which contains information about our FileUploadSession */
export type FileUploadSession = {
  readonly __typename?: 'FileUploadSession';
  /**   Indicates wether server accepted user's FileUploadRequest */
  readonly accepted: Scalars['Boolean']['output'];
  /**   If not accepted, human readable reason for denial */
  readonly error?: Maybe<Scalars['String']['output']>;
  /**   Server generated session id which can be used to communicate to server about this session */
  readonly sid?: Maybe<Scalars['String']['output']>;
};

/**   Server response to requestFileUploadSession, refreshFileUploadSession */
export type FileUploadSessionResponse = {
  readonly __typename?: 'FileUploadSessionResponse';
  /**   Session information */
  readonly session: FileUploadSession;
  /**   Upload URLs. If there was an error, this field will not be present. Otherwise, it will contain 1 or more upload URLs. */
  readonly urls?: Maybe<ReadonlyArray<FileUploadUrl>>;
};

/**   Refresh */
export type FileUploadSessionResponseB2 = {
  readonly __typename?: 'FileUploadSessionResponseB2';
  readonly b2_part_upload_endpoints?: Maybe<ReadonlyArray<Maybe<B2PartUploadEndpoint>>>;
  readonly b2_upload_endpoints?: Maybe<ReadonlyArray<B2UploadEndpoint>>;
  readonly paths?: Maybe<ReadonlyArray<FileUploadPathB2>>;
  readonly session: FileUploadSession;
};

export type FileUploadSessionResponseDropbox = {
  readonly __typename?: 'FileUploadSessionResponseDropbox';
  readonly paths?: Maybe<ReadonlyArray<FileUploadPathDropbox>>;
  readonly session: FileUploadSession;
  readonly token?: Maybe<Scalars['String']['output']>;
};

/**   Server returned type to indicate where to upload a certain file */
export type FileUploadUrl = {
  readonly __typename?: 'FileUploadUrl';
  /**   Unix epoch timestamp until when upload URL is valid */
  readonly expiry?: Maybe<Scalars['Int']['output']>;
  /**   User-provided unique ID (fuid) from corresponding FileUploadRequest */
  readonly fuid: Scalars['String']['output'];
  /**   POST endpoint for uploading file */
  readonly url: Scalars['String']['output'];
};

export type GraphqlSubscriptionInfo = {
  readonly __typename?: 'GraphqlSubscriptionInfo';
  readonly stream: Scalars['String']['output'];
  readonly uri: Scalars['String']['output'];
};

export type ImageChannel = {
  readonly __typename?: 'ImageChannel';
  readonly channel?: Maybe<Scalars['String']['output']>;
  readonly full?: Maybe<ImageFullOptions>;
  readonly height?: Maybe<Scalars['Int']['output']>;
  readonly mask?: Maybe<Scalars['String']['output']>;
  readonly thumbs?: Maybe<ImageThumbs>;
  readonly type?: Maybe<Scalars['String']['output']>;
  readonly width?: Maybe<Scalars['Int']['output']>;
};

export type ImageDetail = {
  readonly __typename?: 'ImageDetail';
  readonly height?: Maybe<Scalars['Int']['output']>;
  readonly imageset_byte_size?: Maybe<Scalars['Int']['output']>;
  readonly original?: Maybe<Scalars['String']['output']>;
  readonly original_name?: Maybe<Scalars['String']['output']>;
  readonly sub_count?: Maybe<Scalars['Int']['output']>;
  readonly width?: Maybe<Scalars['Int']['output']>;
};

export type ImageFullOptions = {
  readonly __typename?: 'ImageFullOptions';
  readonly fits?: Maybe<Scalars['String']['output']>;
  readonly jpg?: Maybe<Scalars['String']['output']>;
  readonly png?: Maybe<Scalars['String']['output']>;
  readonly tiff?: Maybe<Scalars['String']['output']>;
};

export type ImageSetSummary = {
  readonly __typename?: 'ImageSetSummary';
  readonly caption: Scalars['String']['output'];
  readonly channels?: Maybe<ReadonlyArray<Maybe<ImageChannel>>>;
  readonly creation_timestamp: Scalars['Int']['output'];
  readonly errors?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly image_detail?: Maybe<ImageDetail>;
  readonly overlay_objects?: Maybe<Scalars['String']['output']>;
  readonly projection?: Maybe<Projection>;
  readonly set_id: Scalars['String']['output'];
  readonly state: Scalars['String']['output'];
  readonly tags?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly updated_timestamp?: Maybe<Scalars['Int']['output']>;
};

export type ImageSetSummaryCursor = {
  readonly __typename?: 'ImageSetSummaryCursor';
  readonly image_sets?: Maybe<ReadonlyArray<Maybe<ImageSetSummary>>>;
  readonly nextToken?: Maybe<Scalars['String']['output']>;
};

export type ImageSetUpdate = {
  readonly __typename?: 'ImageSetUpdate';
  readonly deleted?: Maybe<Scalars['Boolean']['output']>;
  readonly imageset?: Maybe<ImageSetSummary>;
  readonly stream: Scalars['String']['output'];
};

export type ImageThumbs = {
  readonly __typename?: 'ImageThumbs';
  readonly full?: Maybe<Scalars['String']['output']>;
  readonly hd?: Maybe<Scalars['String']['output']>;
  readonly icon?: Maybe<Scalars['String']['output']>;
  readonly large?: Maybe<Scalars['String']['output']>;
  readonly medium?: Maybe<Scalars['String']['output']>;
  readonly small?: Maybe<Scalars['String']['output']>;
  readonly xlarge?: Maybe<Scalars['String']['output']>;
};

export type Mutation = {
  readonly __typename?: 'Mutation';
  readonly addImageSetUpdate?: Maybe<ImageSetUpdate>;
  readonly addImageTags: Scalars['Boolean']['output'];
  /**
   *   Note these are private mutations and should be IAM/APIKey bound only to prevent
   *  end-user abuse
   */
  readonly addNotification?: Maybe<Notification>;
  readonly addNotification2?: Maybe<Notification2>;
  readonly deleteEntireImageSet: Scalars['Boolean']['output'];
  readonly deleteImageSet: Scalars['Boolean']['output'];
  readonly deleteImageTags: Scalars['Boolean']['output'];
  readonly linkDropbox?: Maybe<DropboxStatus>;
  readonly reprocessImageSet: Scalars['Boolean']['output'];
  readonly setImageSetCaption: Scalars['Boolean']['output'];
  readonly setUserFingerprint: Scalars['Boolean']['output'];
  readonly setUserProfile?: Maybe<UserProfile>;
  readonly tagImageSet: Scalars['Boolean']['output'];
  readonly unlinkDropbox: Scalars['Boolean']['output'];
};


export type MutationAddImageSetUpdateArgs = {
  deleted?: InputMaybe<Scalars['Boolean']['input']>;
  imageset?: InputMaybe<Scalars['AWSJSON']['input']>;
  stream: Scalars['String']['input'];
};


export type MutationAddImageTagsArgs = {
  tags: ReadonlyArray<Scalars['String']['input']>;
};


export type MutationAddNotification2Args = {
  imageset_id?: InputMaybe<Scalars['String']['input']>;
  message: Scalars['String']['input'];
  stream: Scalars['String']['input'];
};


export type MutationDeleteImageSetArgs = {
  id: ReadonlyArray<Scalars['String']['input']>;
};


export type MutationDeleteImageTagsArgs = {
  tags: ReadonlyArray<Scalars['String']['input']>;
};


export type MutationLinkDropboxArgs = {
  code: Scalars['String']['input'];
};


export type MutationReprocessImageSetArgs = {
  sid: Scalars['String']['input'];
};


export type MutationSetImageSetCaptionArgs = {
  caption: Scalars['String']['input'];
  sid: Scalars['String']['input'];
};


export type MutationSetUserFingerprintArgs = {
  id: Scalars['String']['input'];
};


export type MutationSetUserProfileArgs = {
  profile: Scalars['AWSJSON']['input'];
};


export type MutationTagImageSetArgs = {
  sid: Scalars['String']['input'];
  tags: ReadonlyArray<Scalars['String']['input']>;
};

export type Notification = {
  readonly __typename?: 'Notification';
  readonly imageset_id?: Maybe<Scalars['String']['output']>;
  readonly message: Scalars['String']['output'];
};

export type Notification2 = {
  readonly __typename?: 'Notification2';
  readonly imageset_id?: Maybe<Scalars['String']['output']>;
  readonly message: Scalars['String']['output'];
  readonly stream: Scalars['String']['output'];
};

export type ObjectSuggestion = {
  readonly __typename?: 'ObjectSuggestion';
  readonly id: Scalars['String']['output'];
  readonly text: Scalars['String']['output'];
};

export type ProjDistBSpline = {
  readonly __typename?: 'ProjDistBSpline';
  readonly coeff_x: ReadonlyArray<Scalars['Float']['output']>;
  readonly coeff_y: ReadonlyArray<Scalars['Float']['output']>;
  readonly knots_x: ReadonlyArray<Scalars['Float']['output']>;
  readonly knots_y: ReadonlyArray<Scalars['Float']['output']>;
  readonly kx: Scalars['Int']['output'];
  readonly ky: Scalars['Int']['output'];
  readonly region0_x?: Maybe<Scalars['Int']['output']>;
  readonly region0_y?: Maybe<Scalars['Int']['output']>;
  readonly region1_x?: Maybe<Scalars['Int']['output']>;
  readonly region1_y?: Maybe<Scalars['Int']['output']>;
};

export type Projection = {
  readonly __typename?: 'Projection';
  readonly bbox?: Maybe<ReadonlyArray<SkyPoint>>;
  readonly bbox0_de: Scalars['Float']['output'];
  readonly bbox0_ra: Scalars['Float']['output'];
  readonly bbox1_de: Scalars['Float']['output'];
  readonly bbox1_ra: Scalars['Float']['output'];
  readonly center_de: Scalars['Float']['output'];
  readonly center_ra: Scalars['Float']['output'];
  readonly height: Scalars['Int']['output'];
  readonly orientation: Scalars['Float']['output'];
  readonly parity: Scalars['Int']['output'];
  readonly pixel_area: Scalars['Float']['output'];
  readonly proj_tan?: Maybe<TanProjection>;
  readonly scale_app: Scalars['Float']['output'];
  readonly type: Scalars['String']['output'];
  readonly width: Scalars['Int']['output'];
  readonly world_area: Scalars['Float']['output'];
};

export type Query = {
  readonly __typename?: 'Query';
  readonly getApiKey?: Maybe<Scalars['String']['output']>;
  readonly getBackendStatus?: Maybe<BackendStatus>;
  readonly getDropboxStatus?: Maybe<DropboxStatus>;
  readonly getGraphqlSubscriptionInfo?: Maybe<GraphqlSubscriptionInfo>;
  readonly getImageSetSummaries: ImageSetSummaryCursor;
  readonly getImageSetSummariesFiltered: ImageSetSummaryCursor;
  readonly getImageSetSummary?: Maybe<ImageSetSummary>;
  readonly getImageTags?: Maybe<ReadonlyArray<Maybe<Scalars['String']['output']>>>;
  readonly getObjectFilterCatagories?: Maybe<ReadonlyArray<Maybe<ObjectSuggestion>>>;
  readonly getObjectSuggestion?: Maybe<ReadonlyArray<Maybe<ObjectSuggestion>>>;
  readonly getUserConnect?: Maybe<UserConnect>;
  readonly getUserProfile?: Maybe<UserProfile>;
  readonly notifyFileUploadComplete?: Maybe<FileUploadSession>;
  /**
   *   Request a file(s) upload session by providing a list of files intended to be uploaded.
   *  This is the new scheme using backblaze-B2
   */
  readonly requestFileUploadSessionB2?: Maybe<FileUploadSessionResponseB2>;
  readonly requestFileUploadSessionDropbox?: Maybe<FileUploadSessionResponseDropbox>;
  readonly requestFileUploadUrl?: Maybe<FileUploadUrl>;
  readonly requestImageSetDownload?: Maybe<DownloadResponse>;
};


export type QueryGetImageSetSummariesArgs = {
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetImageSetSummariesFilteredArgs = {
  filterCats?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  filterIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
};


export type QueryGetImageSetSummaryArgs = {
  setId: Scalars['String']['input'];
};


export type QueryGetObjectSuggestionArgs = {
  input: Scalars['String']['input'];
  limit?: InputMaybe<Scalars['Int']['input']>;
};


export type QueryNotifyFileUploadCompleteArgs = {
  files: ReadonlyArray<FileUploadComplete>;
};


export type QueryRequestFileUploadSessionB2Args = {
  files: ReadonlyArray<FileUploadRequest>;
};


export type QueryRequestFileUploadSessionDropboxArgs = {
  files: ReadonlyArray<FileUploadRequest>;
};


export type QueryRequestImageSetDownloadArgs = {
  request: ReadonlyArray<Scalars['String']['input']>;
};

export type SkyPoint = {
  readonly __typename?: 'SkyPoint';
  readonly dec: Scalars['Float']['output'];
  readonly ra: Scalars['Float']['output'];
};

export type Subscription = {
  readonly __typename?: 'Subscription';
  readonly onImageSetUpdate?: Maybe<ImageSetUpdate>;
  readonly onNotification?: Maybe<Notification>;
  readonly onNotification2?: Maybe<Notification2>;
};


export type SubscriptionOnImageSetUpdateArgs = {
  stream: Scalars['String']['input'];
};


export type SubscriptionOnNotification2Args = {
  stream: Scalars['String']['input'];
};

export type TanProjection = {
  readonly __typename?: 'TanProjection';
  readonly cd11: Scalars['Float']['output'];
  readonly cd12: Scalars['Float']['output'];
  readonly cd21: Scalars['Float']['output'];
  readonly cd22: Scalars['Float']['output'];
  readonly crpix1: Scalars['Float']['output'];
  readonly crpix2: Scalars['Float']['output'];
  readonly crval1: Scalars['Float']['output'];
  readonly crval2: Scalars['Float']['output'];
  readonly distspline?: Maybe<ReadonlyArray<Maybe<ProjDistBSpline>>>;
};

export type UserConnect = {
  readonly __typename?: 'UserConnect';
  readonly userProfile?: Maybe<UserProfile>;
};

export type UserProfile = {
  readonly __typename?: 'UserProfile';
  readonly address?: Maybe<Scalars['AWSJSON']['output']>;
  readonly client_logging_enabled?: Maybe<Scalars['Boolean']['output']>;
  readonly country?: Maybe<Scalars['String']['output']>;
  readonly email: Scalars['String']['output'];
  readonly fullname?: Maybe<Scalars['String']['output']>;
  readonly picture?: Maybe<Scalars['String']['output']>;
  readonly region?: Maybe<Scalars['String']['output']>;
  readonly timezone?: Maybe<Scalars['String']['output']>;
};

export type UserUiProfile = {
  readonly __typename?: 'UserUiProfile';
  readonly theme?: Maybe<Scalars['String']['output']>;
};

export type AddImageTagsVariables = Exact<{
  tags: ReadonlyArray<Scalars['String']['input']>;
}>;


export type AddImageTags = { readonly __typename?: 'Mutation', readonly addImageTags: boolean };

export type AddNotificationVariables = Exact<{ [key: string]: never; }>;


export type AddNotification = { readonly __typename?: 'Mutation', readonly addNotification?: { readonly __typename?: 'Notification', readonly imageset_id?: string | null, readonly message: string } | null };

export type DeleteEntireImageSetVariables = Exact<{ [key: string]: never; }>;


export type DeleteEntireImageSet = { readonly __typename?: 'Mutation', readonly deleteEntireImageSet: boolean };

export type DeleteImageSetVariables = Exact<{
  id: ReadonlyArray<Scalars['String']['input']>;
}>;


export type DeleteImageSet = { readonly __typename?: 'Mutation', readonly deleteImageSet: boolean };

export type DeleteImageTagsVariables = Exact<{
  tags: ReadonlyArray<Scalars['String']['input']>;
}>;


export type DeleteImageTags = { readonly __typename?: 'Mutation', readonly deleteImageTags: boolean };

export type GetApiKeyVariables = Exact<{ [key: string]: never; }>;


export type GetApiKey = { readonly __typename?: 'Query', readonly getApiKey?: string | null };

export type GetBackendStatusVariables = Exact<{ [key: string]: never; }>;


export type GetBackendStatus = { readonly __typename?: 'Query', readonly getBackendStatus?: { readonly __typename?: 'BackendStatus', readonly version?: string | null, readonly status: string } | null };

export type GetDropboxStatusVariables = Exact<{ [key: string]: never; }>;


export type GetDropboxStatus = { readonly __typename?: 'Query', readonly getDropboxStatus?: { readonly __typename?: 'DropboxStatus', readonly linked: boolean } | null };

export type GetGraphqlSubscriptionInfoVariables = Exact<{ [key: string]: never; }>;


export type GetGraphqlSubscriptionInfo = { readonly __typename?: 'Query', readonly getGraphqlSubscriptionInfo?: { readonly __typename?: 'GraphqlSubscriptionInfo', readonly stream: string, readonly uri: string } | null };

export type GetImageSetSummariesVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetImageSetSummaries = { readonly __typename?: 'Query', readonly getImageSetSummaries: { readonly __typename?: 'ImageSetSummaryCursor', readonly nextToken?: string | null, readonly image_sets?: ReadonlyArray<{ readonly __typename?: 'ImageSetSummary', readonly caption: string, readonly creation_timestamp: number, readonly updated_timestamp?: number | null, readonly set_id: string, readonly channels?: ReadonlyArray<{ readonly __typename?: 'ImageChannel', readonly type?: string | null, readonly thumbs?: { readonly __typename?: 'ImageThumbs', readonly hd?: string | null, readonly large?: string | null, readonly medium?: string | null, readonly small?: string | null, readonly xlarge?: string | null, readonly full?: string | null } | null, readonly full?: { readonly __typename?: 'ImageFullOptions', readonly fits?: string | null, readonly jpg?: string | null, readonly tiff?: string | null, readonly png?: string | null } | null } | null> | null, readonly image_detail?: { readonly __typename?: 'ImageDetail', readonly width?: number | null, readonly height?: number | null, readonly original_name?: string | null } | null } | null> | null } };

export type GetImageSetSummariesFilteredVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
  filterIds?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
  filterCats?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']['input']>>>;
}>;


export type GetImageSetSummariesFiltered = { readonly __typename?: 'Query', readonly getImageSetSummariesFiltered: { readonly __typename?: 'ImageSetSummaryCursor', readonly nextToken?: string | null, readonly image_sets?: ReadonlyArray<{ readonly __typename?: 'ImageSetSummary', readonly caption: string, readonly set_id: string, readonly channels?: ReadonlyArray<{ readonly __typename?: 'ImageChannel', readonly type?: string | null, readonly thumbs?: { readonly __typename?: 'ImageThumbs', readonly hd?: string | null, readonly large?: string | null, readonly medium?: string | null, readonly small?: string | null, readonly xlarge?: string | null, readonly full?: string | null } | null, readonly full?: { readonly __typename?: 'ImageFullOptions', readonly fits?: string | null, readonly jpg?: string | null, readonly tiff?: string | null, readonly png?: string | null } | null } | null> | null, readonly image_detail?: { readonly __typename?: 'ImageDetail', readonly width?: number | null, readonly height?: number | null, readonly original_name?: string | null } | null } | null> | null } };

export type GetImageSetSummaryVariables = Exact<{
  setId: Scalars['String']['input'];
}>;


export type GetImageSetSummary = { readonly __typename?: 'Query', readonly getImageSetSummary?: { readonly __typename?: 'ImageSetSummary', readonly overlay_objects?: string | null, readonly caption: string, readonly creation_timestamp: number, readonly errors?: ReadonlyArray<string | null> | null, readonly set_id: string, readonly state: string, readonly updated_timestamp?: number | null, readonly tags?: ReadonlyArray<string | null> | null, readonly channels?: ReadonlyArray<{ readonly __typename?: 'ImageChannel', readonly type?: string | null, readonly height?: number | null, readonly width?: number | null, readonly channel?: string | null, readonly mask?: string | null, readonly full?: { readonly __typename?: 'ImageFullOptions', readonly fits?: string | null, readonly jpg?: string | null, readonly tiff?: string | null, readonly png?: string | null } | null, readonly thumbs?: { readonly __typename?: 'ImageThumbs', readonly hd?: string | null, readonly full?: string | null, readonly xlarge?: string | null, readonly small?: string | null, readonly medium?: string | null, readonly large?: string | null, readonly icon?: string | null } | null } | null> | null, readonly image_detail?: { readonly __typename?: 'ImageDetail', readonly height?: number | null, readonly imageset_byte_size?: number | null, readonly sub_count?: number | null, readonly width?: number | null } | null, readonly projection?: { readonly __typename?: 'Projection', readonly bbox0_de: number, readonly bbox0_ra: number, readonly bbox1_de: number, readonly bbox1_ra: number, readonly center_de: number, readonly center_ra: number, readonly height: number, readonly orientation: number, readonly parity: number, readonly pixel_area: number, readonly scale_app: number, readonly type: string, readonly world_area: number, readonly width: number, readonly bbox?: ReadonlyArray<{ readonly __typename?: 'SkyPoint', readonly ra: number, readonly dec: number }> | null, readonly proj_tan?: { readonly __typename?: 'TanProjection', readonly cd11: number, readonly cd12: number, readonly cd22: number, readonly cd21: number, readonly crpix1: number, readonly crpix2: number, readonly crval1: number, readonly crval2: number } | null } | null } | null };

export type GetImageTagsVariables = Exact<{ [key: string]: never; }>;


export type GetImageTags = { readonly __typename?: 'Query', readonly getImageTags?: ReadonlyArray<string | null> | null };

export type GetObjectFilterCatagoriesVariables = Exact<{ [key: string]: never; }>;


export type GetObjectFilterCatagories = { readonly __typename?: 'Query', readonly getObjectFilterCatagories?: ReadonlyArray<{ readonly __typename?: 'ObjectSuggestion', readonly id: string, readonly text: string } | null> | null };

export type GetObjectSuggestionVariables = Exact<{
  input: Scalars['String']['input'];
}>;


export type GetObjectSuggestion = { readonly __typename?: 'Query', readonly getObjectSuggestion?: ReadonlyArray<{ readonly __typename?: 'ObjectSuggestion', readonly id: string, readonly text: string } | null> | null };

export type GetUserProfileVariables = Exact<{ [key: string]: never; }>;


export type GetUserProfile = { readonly __typename?: 'Query', readonly getUserProfile?: { readonly __typename?: 'UserProfile', readonly email: string, readonly picture?: string | null, readonly fullname?: string | null, readonly address?: string | null, readonly region?: string | null, readonly country?: string | null, readonly timezone?: string | null, readonly client_logging_enabled?: boolean | null } | null };

export type LinkDropboxVariables = Exact<{
  code: Scalars['String']['input'];
}>;


export type LinkDropbox = { readonly __typename?: 'Mutation', readonly linkDropbox?: { readonly __typename?: 'DropboxStatus', readonly linked: boolean, readonly message?: string | null } | null };

export type NotifyFileUploadCompleteVariables = Exact<{
  files: ReadonlyArray<FileUploadComplete>;
}>;


export type NotifyFileUploadComplete = { readonly __typename?: 'Query', readonly notifyFileUploadComplete?: { readonly __typename?: 'FileUploadSession', readonly sid?: string | null, readonly error?: string | null } | null };

export type OnImageSetUpdateVariables = Exact<{
  stream: Scalars['String']['input'];
}>;


export type OnImageSetUpdate = { readonly __typename?: 'Subscription', readonly onImageSetUpdate?: { readonly __typename?: 'ImageSetUpdate', readonly stream: string, readonly deleted?: boolean | null, readonly imageset?: { readonly __typename?: 'ImageSetSummary', readonly caption: string, readonly set_id: string, readonly state: string, readonly errors?: ReadonlyArray<string | null> | null, readonly creation_timestamp: number, readonly updated_timestamp?: number | null, readonly overlay_objects?: string | null, readonly tags?: ReadonlyArray<string | null> | null } | null } | null };

export type OnNotificationVariables = Exact<{ [key: string]: never; }>;


export type OnNotification = { readonly __typename?: 'Subscription', readonly onNotification?: { readonly __typename: 'Notification', readonly imageset_id?: string | null, readonly message: string } | null };

export type OnNotification2Variables = Exact<{
  stream: Scalars['String']['input'];
}>;


export type OnNotification2 = { readonly __typename?: 'Subscription', readonly onNotification2?: { readonly __typename?: 'Notification2', readonly stream: string, readonly message: string, readonly imageset_id?: string | null } | null };

export type ReprocessImageSetVariables = Exact<{
  sid: Scalars['String']['input'];
}>;


export type ReprocessImageSet = { readonly __typename?: 'Mutation', readonly reprocessImageSet: boolean };

export type RequestFileUploadSessionB2Variables = Exact<{
  files: ReadonlyArray<FileUploadRequest>;
}>;


export type RequestFileUploadSessionB2 = { readonly __typename?: 'Query', readonly requestFileUploadSessionB2?: { readonly __typename?: 'FileUploadSessionResponseB2', readonly b2_upload_endpoints?: ReadonlyArray<{ readonly __typename?: 'B2UploadEndpoint', readonly b2_authtoken: string, readonly b2_uploadurl: string }> | null, readonly b2_part_upload_endpoints?: ReadonlyArray<{ readonly __typename?: 'B2PartUploadEndpoint', readonly fuid: string, readonly b2_upload_endpoints: ReadonlyArray<{ readonly __typename?: 'B2UploadEndpoint', readonly b2_uploadurl: string, readonly b2_authtoken: string }> } | null> | null, readonly paths?: ReadonlyArray<{ readonly __typename?: 'FileUploadPathB2', readonly b2_path: string, readonly fuid: string }> | null, readonly session: { readonly __typename?: 'FileUploadSession', readonly sid?: string | null, readonly error?: string | null, readonly accepted: boolean } } | null };

export type RequestFileUploadSessionDropboxVariables = Exact<{
  files: ReadonlyArray<FileUploadRequest>;
}>;


export type RequestFileUploadSessionDropbox = { readonly __typename?: 'Query', readonly requestFileUploadSessionDropbox?: { readonly __typename?: 'FileUploadSessionResponseDropbox', readonly token?: string | null, readonly paths?: ReadonlyArray<{ readonly __typename?: 'FileUploadPathDropbox', readonly fuid: string, readonly path: string }> | null, readonly session: { readonly __typename?: 'FileUploadSession', readonly error?: string | null, readonly sid?: string | null } } | null };

export type RequestImageSetDownloadVariables = Exact<{
  request: ReadonlyArray<Scalars['String']['input']>;
}>;


export type RequestImageSetDownload = { readonly __typename?: 'Query', readonly requestImageSetDownload?: { readonly __typename?: 'DownloadResponse', readonly urls?: ReadonlyArray<{ readonly __typename?: 'DownloadLink', readonly token?: string | null, readonly blob: string, readonly blob_size: number, readonly url: string } | null> | null } | null };

export type SetImageSetCaptionVariables = Exact<{
  sid: Scalars['String']['input'];
  caption: Scalars['String']['input'];
}>;


export type SetImageSetCaption = { readonly __typename?: 'Mutation', readonly setImageSetCaption: boolean };

export type SetUserProfileVariables = Exact<{
  profile: Scalars['AWSJSON']['input'];
}>;


export type SetUserProfile = { readonly __typename?: 'Mutation', readonly setUserProfile?: { readonly __typename?: 'UserProfile', readonly email: string, readonly picture?: string | null, readonly fullname?: string | null, readonly address?: string | null, readonly region?: string | null, readonly country?: string | null, readonly timezone?: string | null } | null };

export type TagImageSetVariables = Exact<{
  sid: Scalars['String']['input'];
  tags: ReadonlyArray<Scalars['String']['input']>;
}>;


export type TagImageSet = { readonly __typename?: 'Mutation', readonly tagImageSet: boolean };

export type UnlinkDropboxVariables = Exact<{ [key: string]: never; }>;


export type UnlinkDropbox = { readonly __typename?: 'Mutation', readonly unlinkDropbox: boolean };


export const AddImageTagsDocument = /*#__PURE__*/ gql`
    mutation addImageTags($tags: [String!]!) {
  addImageTags(tags: $tags)
}
    `;

export function useAddImageTags() {
  return Urql.useMutation<AddImageTags, AddImageTagsVariables>(AddImageTagsDocument);
};
export const AddNotificationDocument = /*#__PURE__*/ gql`
    mutation addNotification {
  addNotification {
    imageset_id
    message
  }
}
    `;

export function useAddNotification() {
  return Urql.useMutation<AddNotification, AddNotificationVariables>(AddNotificationDocument);
};
export const DeleteEntireImageSetDocument = /*#__PURE__*/ gql`
    mutation deleteEntireImageSet {
  deleteEntireImageSet
}
    `;

export function useDeleteEntireImageSet() {
  return Urql.useMutation<DeleteEntireImageSet, DeleteEntireImageSetVariables>(DeleteEntireImageSetDocument);
};
export const DeleteImageSetDocument = /*#__PURE__*/ gql`
    mutation deleteImageSet($id: [String!]!) {
  deleteImageSet(id: $id)
}
    `;

export function useDeleteImageSet() {
  return Urql.useMutation<DeleteImageSet, DeleteImageSetVariables>(DeleteImageSetDocument);
};
export const DeleteImageTagsDocument = /*#__PURE__*/ gql`
    mutation deleteImageTags($tags: [String!]!) {
  deleteImageTags(tags: $tags)
}
    `;

export function useDeleteImageTags() {
  return Urql.useMutation<DeleteImageTags, DeleteImageTagsVariables>(DeleteImageTagsDocument);
};
export const GetApiKeyDocument = /*#__PURE__*/ gql`
    query getApiKey {
  getApiKey
}
    `;

export function useGetApiKey(options?: Omit<Urql.UseQueryArgs<never, GetApiKeyVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetApiKey, GetApiKeyVariables | undefined>({ query: GetApiKeyDocument, variables: undefined, ...options });
};
export const GetBackendStatusDocument = /*#__PURE__*/ gql`
    query getBackendStatus {
  getBackendStatus {
    version
    status
  }
}
    `;

export function useGetBackendStatus(options?: Omit<Urql.UseQueryArgs<never, GetBackendStatusVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetBackendStatus, GetBackendStatusVariables | undefined>({ query: GetBackendStatusDocument, variables: undefined, ...options });
};
export const GetDropboxStatusDocument = /*#__PURE__*/ gql`
    query getDropboxStatus {
  getDropboxStatus {
    linked
  }
}
    `;

export function useGetDropboxStatus(options?: Omit<Urql.UseQueryArgs<never, GetDropboxStatusVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetDropboxStatus, GetDropboxStatusVariables | undefined>({ query: GetDropboxStatusDocument, variables: undefined, ...options });
};
export const GetGraphqlSubscriptionInfoDocument = /*#__PURE__*/ gql`
    query getGraphqlSubscriptionInfo {
  getGraphqlSubscriptionInfo {
    stream
    uri
  }
}
    `;

export function useGetGraphqlSubscriptionInfo(options?: Omit<Urql.UseQueryArgs<never, GetGraphqlSubscriptionInfoVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetGraphqlSubscriptionInfo, GetGraphqlSubscriptionInfoVariables | undefined>({ query: GetGraphqlSubscriptionInfoDocument, variables: undefined, ...options });
};
export const GetImageSetSummariesDocument = /*#__PURE__*/ gql`
    query getImageSetSummaries($limit: Int, $nextToken: String) {
  getImageSetSummaries(limit: $limit, nextToken: $nextToken) {
    nextToken
    image_sets {
      caption
      creation_timestamp
      updated_timestamp
      channels {
        type
        thumbs {
          hd
          large
          medium
          small
          xlarge
          full
        }
        full {
          fits
          jpg
          tiff
          png
        }
      }
      image_detail {
        width
        height
        original_name
      }
      set_id
    }
  }
}
    `;

export function useGetImageSetSummaries(options?: Omit<Urql.UseQueryArgs<never, GetImageSetSummariesVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetImageSetSummaries, GetImageSetSummariesVariables | undefined>({ query: GetImageSetSummariesDocument, variables: undefined, ...options });
};
export const GetImageSetSummariesFilteredDocument = /*#__PURE__*/ gql`
    query getImageSetSummariesFiltered($limit: Int, $nextToken: String, $filterIds: [String], $filterCats: [String]) {
  getImageSetSummariesFiltered(
    limit: $limit
    nextToken: $nextToken
    filterIds: $filterIds
    filterCats: $filterCats
  ) {
    nextToken
    image_sets {
      caption
      channels {
        type
        thumbs {
          hd
          large
          medium
          small
          xlarge
          full
        }
        full {
          fits
          jpg
          tiff
          png
        }
      }
      image_detail {
        width
        height
        original_name
      }
      set_id
    }
  }
}
    `;

export function useGetImageSetSummariesFiltered(options?: Omit<Urql.UseQueryArgs<never, GetImageSetSummariesFilteredVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetImageSetSummariesFiltered, GetImageSetSummariesFilteredVariables | undefined>({ query: GetImageSetSummariesFilteredDocument, variables: undefined, ...options });
};
export const GetImageSetSummaryDocument = /*#__PURE__*/ gql`
    query getImageSetSummary($setId: String!) {
  getImageSetSummary(setId: $setId) {
    overlay_objects
    caption
    channels {
      full {
        fits
        jpg
        tiff
        png
      }
      thumbs {
        hd
        full
        xlarge
        small
        medium
        large
        icon
      }
      type
      height
      width
      channel
      mask
    }
    creation_timestamp
    errors
    image_detail {
      height
      imageset_byte_size
      sub_count
      width
    }
    projection {
      bbox {
        ra
        dec
      }
      bbox0_de
      bbox0_ra
      bbox1_de
      bbox1_ra
      center_de
      center_ra
      height
      orientation
      parity
      pixel_area
      proj_tan {
        cd11
        cd12
        cd22
        cd21
        crpix1
        crpix2
        crval1
        crval2
      }
      scale_app
      type
      world_area
      width
    }
    set_id
    state
    updated_timestamp
    tags
  }
}
    `;

export function useGetImageSetSummary(options?: Omit<Urql.UseQueryArgs<never, GetImageSetSummaryVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetImageSetSummary, GetImageSetSummaryVariables | undefined>({ query: GetImageSetSummaryDocument, variables: undefined, ...options });
};
export const GetImageTagsDocument = /*#__PURE__*/ gql`
    query getImageTags {
  getImageTags
}
    `;

export function useGetImageTags(options?: Omit<Urql.UseQueryArgs<never, GetImageTagsVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetImageTags, GetImageTagsVariables | undefined>({ query: GetImageTagsDocument, variables: undefined, ...options });
};
export const GetObjectFilterCatagoriesDocument = /*#__PURE__*/ gql`
    query getObjectFilterCatagories {
  getObjectFilterCatagories {
    id
    text
  }
}
    `;

export function useGetObjectFilterCatagories(options?: Omit<Urql.UseQueryArgs<never, GetObjectFilterCatagoriesVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetObjectFilterCatagories, GetObjectFilterCatagoriesVariables | undefined>({ query: GetObjectFilterCatagoriesDocument, variables: undefined, ...options });
};
export const GetObjectSuggestionDocument = /*#__PURE__*/ gql`
    query getObjectSuggestion($input: String!) {
  getObjectSuggestion(input: $input) {
    id
    text
  }
}
    `;

export function useGetObjectSuggestion(options?: Omit<Urql.UseQueryArgs<never, GetObjectSuggestionVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetObjectSuggestion, GetObjectSuggestionVariables | undefined>({ query: GetObjectSuggestionDocument, variables: undefined, ...options });
};
export const GetUserProfileDocument = /*#__PURE__*/ gql`
    query getUserProfile {
  getUserProfile {
    email
    picture
    fullname
    address
    region
    country
    timezone
    client_logging_enabled
  }
}
    `;

export function useGetUserProfile(options?: Omit<Urql.UseQueryArgs<never, GetUserProfileVariables | undefined>, 'query'>) {
  return Urql.useQuery<GetUserProfile, GetUserProfileVariables | undefined>({ query: GetUserProfileDocument, variables: undefined, ...options });
};
export const LinkDropboxDocument = /*#__PURE__*/ gql`
    mutation linkDropbox($code: String!) {
  linkDropbox(code: $code) {
    linked
    message
  }
}
    `;

export function useLinkDropbox() {
  return Urql.useMutation<LinkDropbox, LinkDropboxVariables>(LinkDropboxDocument);
};
export const NotifyFileUploadCompleteDocument = /*#__PURE__*/ gql`
    query notifyFileUploadComplete($files: [FileUploadComplete!]!) {
  notifyFileUploadComplete(files: $files) {
    sid
    error
  }
}
    `;

export function useNotifyFileUploadComplete(options?: Omit<Urql.UseQueryArgs<never, NotifyFileUploadCompleteVariables | undefined>, 'query'>) {
  return Urql.useQuery<NotifyFileUploadComplete, NotifyFileUploadCompleteVariables | undefined>({ query: NotifyFileUploadCompleteDocument, variables: undefined, ...options });
};
export const OnImageSetUpdateDocument = /*#__PURE__*/ gql`
    subscription onImageSetUpdate($stream: String!) {
  onImageSetUpdate(stream: $stream) {
    stream
    imageset {
      caption
      set_id
      state
      errors
      creation_timestamp
      updated_timestamp
      overlay_objects
      tags
    }
    deleted
  }
}
    `;

export function useOnImageSetUpdate<R = OnImageSetUpdate>(options?: Omit<Urql.UseSubscriptionArgs<never, OnImageSetUpdateVariables | undefined>, 'query'>, handler?: Urql.SubscriptionHandlerArg<OnImageSetUpdate, R>) {
  return Urql.useSubscription<OnImageSetUpdate, R, OnImageSetUpdateVariables | undefined>({ query: OnImageSetUpdateDocument, variables: undefined, ...options }, handler);
};
export const OnNotificationDocument = /*#__PURE__*/ gql`
    subscription onNotification {
  onNotification {
    __typename
    imageset_id
    message
  }
}
    `;

export function useOnNotification<R = OnNotification>(options?: Omit<Urql.UseSubscriptionArgs<never, OnNotificationVariables | undefined>, 'query'>, handler?: Urql.SubscriptionHandlerArg<OnNotification, R>) {
  return Urql.useSubscription<OnNotification, R, OnNotificationVariables | undefined>({ query: OnNotificationDocument, variables: undefined, ...options }, handler);
};
export const OnNotification2Document = /*#__PURE__*/ gql`
    subscription onNotification2($stream: String!) {
  onNotification2(stream: $stream) {
    stream
    message
    imageset_id
  }
}
    `;

export function useOnNotification2<R = OnNotification2>(options?: Omit<Urql.UseSubscriptionArgs<never, OnNotification2Variables | undefined>, 'query'>, handler?: Urql.SubscriptionHandlerArg<OnNotification2, R>) {
  return Urql.useSubscription<OnNotification2, R, OnNotification2Variables | undefined>({ query: OnNotification2Document, variables: undefined, ...options }, handler);
};
export const ReprocessImageSetDocument = /*#__PURE__*/ gql`
    mutation ReprocessImageSet($sid: String!) {
  reprocessImageSet(sid: $sid)
}
    `;

export function useReprocessImageSet() {
  return Urql.useMutation<ReprocessImageSet, ReprocessImageSetVariables>(ReprocessImageSetDocument);
};
export const RequestFileUploadSessionB2Document = /*#__PURE__*/ gql`
    query requestFileUploadSessionB2($files: [FileUploadRequest!]!) {
  requestFileUploadSessionB2(files: $files) {
    b2_upload_endpoints {
      b2_authtoken
      b2_uploadurl
    }
    b2_part_upload_endpoints {
      b2_upload_endpoints {
        b2_uploadurl
        b2_authtoken
      }
      fuid
    }
    paths {
      b2_path
      fuid
    }
    session {
      sid
      error
      accepted
    }
  }
}
    `;

export function useRequestFileUploadSessionB2(options?: Omit<Urql.UseQueryArgs<never, RequestFileUploadSessionB2Variables | undefined>, 'query'>) {
  return Urql.useQuery<RequestFileUploadSessionB2, RequestFileUploadSessionB2Variables | undefined>({ query: RequestFileUploadSessionB2Document, variables: undefined, ...options });
};
export const RequestFileUploadSessionDropboxDocument = /*#__PURE__*/ gql`
    query requestFileUploadSessionDropbox($files: [FileUploadRequest!]!) {
  requestFileUploadSessionDropbox(files: $files) {
    token
    paths {
      fuid
      path
    }
    session {
      error
      sid
    }
  }
}
    `;

export function useRequestFileUploadSessionDropbox(options?: Omit<Urql.UseQueryArgs<never, RequestFileUploadSessionDropboxVariables | undefined>, 'query'>) {
  return Urql.useQuery<RequestFileUploadSessionDropbox, RequestFileUploadSessionDropboxVariables | undefined>({ query: RequestFileUploadSessionDropboxDocument, variables: undefined, ...options });
};
export const RequestImageSetDownloadDocument = /*#__PURE__*/ gql`
    query RequestImageSetDownload($request: [String!]!) {
  requestImageSetDownload(request: $request) {
    urls {
      token
      blob
      blob_size
      url
    }
  }
}
    `;

export function useRequestImageSetDownload(options?: Omit<Urql.UseQueryArgs<never, RequestImageSetDownloadVariables | undefined>, 'query'>) {
  return Urql.useQuery<RequestImageSetDownload, RequestImageSetDownloadVariables | undefined>({ query: RequestImageSetDownloadDocument, variables: undefined, ...options });
};
export const SetImageSetCaptionDocument = /*#__PURE__*/ gql`
    mutation setImageSetCaption($sid: String!, $caption: String!) {
  setImageSetCaption(sid: $sid, caption: $caption)
}
    `;

export function useSetImageSetCaption() {
  return Urql.useMutation<SetImageSetCaption, SetImageSetCaptionVariables>(SetImageSetCaptionDocument);
};
export const SetUserProfileDocument = /*#__PURE__*/ gql`
    mutation setUserProfile($profile: AWSJSON!) {
  setUserProfile(profile: $profile) {
    email
    picture
    fullname
    address
    region
    country
    timezone
  }
}
    `;

export function useSetUserProfile() {
  return Urql.useMutation<SetUserProfile, SetUserProfileVariables>(SetUserProfileDocument);
};
export const TagImageSetDocument = /*#__PURE__*/ gql`
    mutation tagImageSet($sid: String!, $tags: [String!]!) {
  tagImageSet(sid: $sid, tags: $tags)
}
    `;

export function useTagImageSet() {
  return Urql.useMutation<TagImageSet, TagImageSetVariables>(TagImageSetDocument);
};
export const UnlinkDropboxDocument = /*#__PURE__*/ gql`
    mutation unlinkDropbox {
  unlinkDropbox
}
    `;

export function useUnlinkDropbox() {
  return Urql.useMutation<UnlinkDropbox, UnlinkDropboxVariables>(UnlinkDropboxDocument);
};